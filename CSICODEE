use std::env;
use std::fs::{self, OpenOptions};
use std::io::{BufRead, BufReader, Write};
use std::path::PathBuf;
use std::collections::HashMap;
use std::process::Command;

const HISTORY_FILE: &str = "~/.smart_cd_history";

#[derive(Debug, Default)]
struct DirectoryTracker {
    history: HashMap<String, usize>, // Stores directory paths with frequency
}

impl DirectoryTracker {
    fn new() -> Self {
        let mut tracker = DirectoryTracker {
            history: HashMap::new(),
        };
        tracker.load_history();
        tracker
    }

    fn record_visit(&mut self, path: &str) {
        let counter = self.history.entry(path.to_string()).or_insert(0);
        *counter += 1;
        self.save_history();
    }

    fn best_match(&self, query: &str, current_dir: &str) -> Option<String> {
        let mut best_match: Option<String> = None;
        let mut highest_score = 0;
        
        for (path, score) in &self.history {
            if path.contains(query) {
                let mut adjusted_score = *score;
                if path.starts_with(current_dir) {
                    adjusted_score += 5; // Prioritize local directories
                }
                if adjusted_score > highest_score {
                    highest_score = adjusted_score;
                    best_match = Some(path.clone());
                }
            }
        }
        best_match
    }
    
    fn load_history(&mut self) {
        let path = shellexpand::tilde(HISTORY_FILE).to_string();
        if let Ok(file) = fs::File::open(&path) {
            let reader = BufReader::new(file);
            for line in reader.lines() {
                if let Ok(entry) = line {
                    let parts: Vec<&str> = entry.split_whitespace().collect();
                    if parts.len() == 2 {
                        if let Ok(count) = parts[1].parse::<usize>() {
                            self.history.insert(parts[0].to_string(), count);
                        }
                    }
                }
            }
        }
    }
    
    fn save_history(&self) {
        let path = shellexpand::tilde(HISTORY_FILE).to_string();
        if let Ok(mut file) = OpenOptions::new().write(true).create(true).truncate(true).open(&path) {
            for (dir, count) in &self.history {
                let _ = writeln!(file, "{} {}", dir, count);
            }
        }
    }
}

fn change_directory(target: &str) {
    let mut cmd = Command::new("sh");
    cmd.arg("-c").arg(format!("cd {} && exec $SHELL", target));
    let _ = cmd.status();
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let mut tracker = DirectoryTracker::new();
    let current_dir = env::current_dir().unwrap().to_string_lossy().to_string();

    if args.len() < 2 {
        println!("Usage: smartcd <query>");
        return;
    }

    let query = &args[1];
    if let Some(target) = tracker.best_match(query, &current_dir) {
        println!("Jumping to: {}", target);
        tracker.record_visit(&target);
        change_directory(&target);
    } else {
        println!("No match found.");
    }
}
